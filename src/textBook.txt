int a=5; // объявляем первую переменную и инициализируем ее
int b=a; // объявляем вторую переменную, и приравниваем ее к первой
a=3; // меняем значение первой
print(b); // проверяем значение второй

byte b=3;
int a=b;

class Point {
int x, y;
}

Point p1 = new Point(3,5);
Point p2=p1;
p1.x=7;
print(p2.x);

Point p1 = new Point(3,5);
Point p2=p1;
p1 = new Point(7,9);
print(p2.x);

Class Point {
	public double x, y;
}

	возвращаемый-тип идентификатор-метода (параметры)
{
		тело-метода
}

public void clear() {
		x = 0;
		y = 0;
}

return выражение;
return;

int sumOfTwoValues(int a, int b) {
	int x;
	x = a + b;
	return x;
}

double sumOfTwoValues(double a, double b) {
	double x;
	x = a + b;
	return x;
}

	native int calcTotal();

public void clear() {
		this.x = 0;
		this.y = 0;
}

public void move(double x, double y) {
		this.x = x;
		this.y = y;
}

class Pixel extends Point {
Color color;
		public void clear() {
		super.clear();
		color = null;
		}
}

Point point = new Pixel();
point.clear(); // используется метод clear() класса Pixel

class Point {
int x, y;

/**
* Конструктор принимает 2 аргумента,
* которыми инициализирует поля объекта.
*/
Point (int newx, int newy){
		x=newx;
		y=newy;
}
}

Point p=new Point(1,2); // Создали объект, получили на него ссылку
Point p1=p; // теперь есть 2 ссылки на точку (1,2)
p=new Point(3,4); // осталась одна ссылка на точку (1,2)
p1=null;
// Объявляем класс Parent
class Parent {
}
// Объявляем класс Child, и наследуем
// его от класса Parent
class Child extends Parent {
}

String s = "abc";
s=s+1;
print(s.equals("abc1"));

MyClass obj4 = new MyClass(15, 7);
MyClass obj5 = new MyClass(15, 7);
MyClass obj6;
Obj6 = obj4;
boolean isEqual1, isEqual2, isInstance;
// isEqual1 - true (ссылки на obj4 и obj6
// указывают на один и тот же объект)
isEqual = obj6 == obj4;

// isEqual2 - false (obj4 и obj5 имеют одинаковые
// характеристики, но указывают на разные объекты)
isEqual2 = obj4 == obj5;
// isInstance - true (obj4 является объектом
// класса MyClass)
isInstance = obj4 instanceof MyClass;

public boolean equals(Object o) {
// Сначала необходимо проверить, что переданный
// объект совместим с типом Point
if (o instanceof Point) {
// Типы совместимы, можно провести преобразование
Point p = (Point)o;
// Возвращаем результат сравнения координат
return p.x==x && p.y==y;
}
// Если объект не совместим с Point, возвращаем false
return false;
}


a[0] = 24; 	// Значение первого элемента массива
a[1] = -7; 	// Значение второго элемента массива
…
a[9] = 4; 	// Значение последнего, десятого
// элемента массива

Шаблоны регулярных выражений компилируются в серии байт-кода, которые затем исполняются соответствующим движком написанным на C. Для продвинутого использования может быть важно уделять внимание тому, как движок будет выполнять данное регулярное выражение, и писать его так, чтобы получался байт-код, который работает быстрее. Оптимизация не рассматривается в этом документе, так как она требует от вас хорошего понимания внутренних деталей движка.

Язык регулярных выражений относительно мал и ограничен, поэтому не все возможные задачи по обработке строк можно сделать с помощью регулярных выражений. Также существуют задачи, которые можно сделать с помощью регулярных выражений, но выражения оказываются слишком сложными. В этих случаях может быть лучше написать обычный Python код, пусть он будет работать медленнее, чем разработанное регулярное выражение, но будет более понятен.
kbuhbnk. kjkn